import pandas as pd
import numpy as np
from ast import literal_eval
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# 1. Load Data
path = "./data"
movies_df = pd.read_csv(path + "/tmdb_5000_movies.csv")
credits_df = pd.read_csv(path + "/tmdb_5000_credits.csv")

# Rename columns in credits to avoid conflicts during merge
credits_df.columns = ['id', 'title', 'cast', 'crew']

# Merge credits into movies based on the common 'id' column
movies_df = movies_df.merge(credits_df[["id", "cast", "crew"]], on="id")

# 2. Convert string representations of lists/dicts to actual objects
features = ["cast", "crew", "keywords", "genres"]
for feature in features:
    movies_df[feature] = movies_df[feature].apply(literal_eval)

# 3. Extract the director from the 'crew' list
def get_director(crew_list):
    for person in crew_list:
        if person["job"] == "Director":
            return person["name"]
    return np.nan

# 4. Limit list features to only the first three names (if available)
def get_list(x):
    if isinstance(x, list):
        names = [i["name"] for i in x]
        return names[:3] if len(names) > 3 else names
    return []

# Apply the functions to extract director and limit cast, keywords, and genres
movies_df["director"] = movies_df["crew"].apply(get_director)
for feature in ["cast", "keywords", "genres"]:
    movies_df[feature] = movies_df[feature].apply(get_list)

# 5. Clean the data: convert text to lowercase and remove spaces
def clean_data(x):
    if isinstance(x, list):
        return [str.lower(i.replace(" ", "")) for i in x]
    elif isinstance(x, str):
        return str.lower(x.replace(" ", ""))
    else:
        return ""

features_to_clean = ["cast", "keywords", "director", "genres"]
for feature in features_to_clean:
    movies_df[feature] = movies_df[feature].apply(clean_data)

# 6. Create a combined "soup" of metadata for each movie
def create_soup(x):
    return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['director'] + ' ' + ' '.join(x['genres'])

movies_df["soup"] = movies_df.apply(create_soup, axis=1)
#print(movies_df["soup"].head())

# 7. Build the count matrix and compute cosine similarity between movies
count_vectorizer = CountVectorizer(stop_words="english")
count_matrix = count_vectorizer.fit_transform(movies_df["soup"])
cosine_sim = cosine_similarity(count_matrix, count_matrix)

# Reset index of movies_df and construct a reverse mapping from movie titles to indices
movies_df = movies_df.reset_index()
indices = pd.Series(movies_df.index, index=movies_df["title"]).drop_duplicates()

# 8. Define a function to get movie recommendations based on a given title
def get_recommendations(title, cosine_sim=cosine_sim):
    # Get the index of the movie that matches the title
    idx = indices[title]
    
    # Get the pairwise similarity scores and enumerate them
    similarity_scores = list(enumerate(cosine_sim[idx]))
    
    # Sort the movies based on the similarity scores
    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)
    
    # Exclude the input movie itself and take the top 10 similar movies
    similarity_scores = similarity_scores[1:11]
    
    # Get the movie indices from the top scores
    movie_indices = [i[0] for i in similarity_scores]
    
    # Return the titles of the recommended movies
    return movies_df["title"].iloc[movie_indices]

# 9. Run tests
print("################ Sistem recomandari bazat pe continut #############\n")
print("Recomandari pentru 'The Social Network':")
print(get_recommendations("The Social Network"))
print("\nRecommendations for 'Warcraft':")
print(get_recommendations("Warcraft"))
